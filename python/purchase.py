"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–∫—É–ø–æ–∫:
- —Å—Ç–≤–æ—Ä—é—î —à–∞–ø–∫—É –∑–∞–∫—É–ø–∫–∏ –≤ `einkauf`
- –¥–æ–¥–∞—î 1..5 –ø–æ–∑–∏—Ü—ñ–π —É `einkauf_artikel`
- —Ü—ñ–Ω–∞ –±–µ—Ä–µ—Ç—å—Å—è –∑ artikel_lieferant (–¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞)
- —Å–∫–ª–∞–¥–∏ –∑–±—ñ–ª—å—à—É—é—Ç—å—Å—è –≤—ñ–¥—Ä–∞–∑—É (UPDATE artikel.lagerbestand = lagerbestand + qty)
"""

import random
from datetime import datetime
from db import get_conn, fetch_all, fetch_one

# –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
MIN_LINES = 1
MAX_LINES = 5
QTY_RANGE = (20, 120)  # —Å–∫—ñ–ª—å–∫–∏ —à—Ç—É–∫ –Ω–∞ –ø–æ–∑–∏—Ü—ñ—é
SUPPLIER_HINT = None   # —è–∫—â–æ —Ö–æ—á–µ—à –ø—Ä–∏–º—É—Å–æ–≤–æ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞: –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 4, –∞–±–æ None –¥–ª—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ

def create_purchase():
    conn = get_conn()
    cur = conn.cursor()

    try:
        # 1) —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤
        lieferanten = fetch_all(cur, "SELECT lieferant_id FROM lieferanten")
        if not lieferanten:
            print("–ù–µ–º–∞—î –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤.")
            return
        if SUPPLIER_HINT:
            lieferant_id = SUPPLIER_HINT
        else:
            lieferant_id = random.choice(lieferanten)[0]

        # 2) —Å—Ç–≤–æ—Ä—é—î–º–æ —à–∞–ø–∫—É –∑–∞–∫—É–ø–∫–∏
        cur.execute(
            "INSERT INTO einkauf (lieferant_id, einkauf_datum, rechnung_nr, bemerkung) "
            "VALUES (%s, NOW(), %s, %s)",
            (lieferant_id, f"EK-{datetime.now():%Y%m%d-%H%M%S}", "Auto-generator")
        )
        einkauf_id = cur.lastrowid

        # 3) –ø–µ—Ä–µ–ª—ñ–∫ —Ç–æ–≤–∞—Ä—ñ–≤, —è–∫—ñ —Ü–µ–π –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫ –º–æ–∂–µ –ø–æ—Å—Ç–∞—á–∞—Ç–∏ (–∑ —Ü—ñ–Ω–∞–º–∏)
        artikel_preise = fetch_all(
            cur,
            "SELECT al.artikel_id, al.einkaufspreis "
            "FROM artikel_lieferant al "
            "WHERE al.lieferant_id = %s",
            (lieferant_id,)
        )
        if not artikel_preise:
            raise RuntimeError(f"–£ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞ {lieferant_id} –Ω–µ–º–∞—î –ø—Ä–∏–≤‚Äô—è–∑–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ —É artikel_lieferant.")

        # –≤–∏–±–∏—Ä–∞—î–º–æ 1..5 —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
        lines = random.sample(artikel_preise, k=min(random.randint(MIN_LINES, MAX_LINES), len(artikel_preise)))

        inserted = 0
        for art_id, ek_preis in lines:
            qty = random.randint(*QTY_RANGE)

            # –¥–æ–¥–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –∑–∞–∫—É–ø–∫–∏
            cur.execute(
                "INSERT INTO einkauf_artikel (einkauf_id, artikel_id, einkauf_menge, einkaufspreis) "
                "VALUES (%s, %s, %s, %s)",
                (einkauf_id, art_id, qty, ek_preis)
            )

            # –∑–±—ñ–ª—å—à—É—î–º–æ —Å–∫–ª–∞–¥
            cur.execute(
                "UPDATE artikel SET lagerbestand = lagerbestand + %s WHERE artikel_id = %s",
                (qty, art_id)
            )
            inserted += 1

        if inserted == 0:
            raise RuntimeError("–ñ–æ–¥–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó –Ω–µ –¥–æ–¥–∞–Ω–æ ‚Äî —Å–∫–∞—Å–æ–≤—É—é –∑–∞–∫—É–ø–∫—É.")

        conn.commit()
        print(f"Einkauf #{einkauf_id} —Å—Ç–≤–æ—Ä–µ–Ω–æ. –ü–æ–∑–∏—Ü—ñ–π: {inserted}. Lieferant: {lieferant_id}.")
        print(f"Einkauf –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {datetime.now():%Y-%m-%d %H:%M:%S}")
    except Exception as e:
        conn.rollback()
        print("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–∫—É–ø–∫–∏:", e)
    finally:
        cur.close()
        conn.close()


if __name__ == "__main__":
    print("="*70)
    print(f"üïí Neuer Einkauf gestartet um {datetime.now():%Y-%m-%d %H:%M:%S}")
    create_purchase()
