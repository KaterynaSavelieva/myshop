import os, traceback
import mysql.connector
from dotenv import load_dotenv

def main():
    load_dotenv()

    cfg = {
        "host": os.getenv("DB_HOST"),
        "user": os.getenv("DB_USER"),
        "password": os.getenv("DB_PASSWORD"),
        "database": os.getenv("DB_NAME"),
        "port": 3306,
        "auth_plugin": "mysql_native_password",
        "connection_timeout": 5,
        "use_pure": True,   # —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—à–∏–π –∫–æ–Ω–µ–∫—Ç–æ—Ä
    }

    # –ø–æ–∫–∞–∑–∞—Ç–∏, —â–æ —Å–∞–º–µ –ø—ñ–¥—Å—Ç–∞–≤–∏–ª–æ—Å—è (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
    dbg = dict(cfg); dbg["password"] = "***"
    print("CFG:", dbg)

    print("üîå Connecting...")
    conn = None
    cur = None
    try:
        conn = mysql.connector.connect(**cfg)
        cur = conn.cursor()
        print("‚úÖ Connected!")
        print("Current DB:", conn.database)

        # –æ—á–∏—Å—Ç–∫–∞ (–±–µ–∑ FK –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤)
        cur.execute("SET FOREIGN_KEY_CHECKS=0;")
        for t in ("verkauf_artikel", "verkauf", "kunden", "artikel"):
            cur.execute(f"DELETE FROM {t};")
            # –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ —Å–∫–∏–Ω—É—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫
            cur.execute(f"ALTER TABLE {t} AUTO_INCREMENT = 1;")
        cur.execute("SET FOREIGN_KEY_CHECKS=1;")
        conn.commit()

        # -----------------------------
        # –≤—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
        # -----------------------------
        print("Inserting test data‚Ä¶")

        # 1) —Ç–æ–≤–∞—Ä–∏
        cur.executemany(
            "INSERT INTO artikel (name, preis) VALUES (%s, %s);",
            [("Apfel", 0.99), ("Banane", 1.10)]
        )
        conn.commit()

        # –º–∞–ø–∞ –Ω–∞–∑–≤ ‚Üí id –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
        cur.execute("SELECT artikel_id, name FROM artikel;")
        artikel_map = {name: aid for (aid, name) in cur.fetchall()}

        # 2) –ø–æ–∫—É–ø–µ—Ü—å
        cur.execute(
            "INSERT INTO kunden (vorname, nachname, email, telefon) "
            "VALUES (%s, %s, %s, %s);",
            ("Anna", "M√ºller", "anna@example.com", "0660123456")
        )
        kunde_id = cur.lastrowid
        conn.commit()

        # 3) –ø—Ä–æ–¥–∞–∂ (—à–∞–ø–∫–∞)
        cur.execute(
            "INSERT INTO verkauf (kunden_id, datum) VALUES (%s, NOW());",
            (kunde_id,)
        )
        verkauf_id = cur.lastrowid
        conn.commit()

        # 4) –ø–æ–∑–∏—Ü—ñ—ó –ø—Ä–æ–¥–∞–∂—É
        cur.executemany(
            "INSERT INTO verkauf_artikel (verkauf_id, artikel_id, menge) "
            "VALUES (%s, %s, %s);",
            [
                (verkauf_id, artikel_map["Apfel"], 2),
                (verkauf_id, artikel_map["Banane"], 3),
            ]
        )
        conn.commit()

        print("Data inserted successfully!")

        # -----------------------------
        # SELECT-–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
        # -----------------------------
        print("\nüßæ Verkaufsdaten:")
        cur.execute("""
            SELECT k.vorname AS kunde,
                   a.name    AS artikel,
                   v.datum,
                   va.menge
            FROM verkauf v
            JOIN kunden k           ON v.kunden_id   = k.kunden_id
            JOIN verkauf_artikel va ON v.verkauf_id  = va.verkauf_id
            JOIN artikel a          ON va.artikel_id = a.artikel_id
            ORDER BY v.verkauf_id, a.artikel_id;
        """)
        for row in cur.fetchall():
            print(row)

    except Exception as e:
        print(" Fehler:", repr(e))
        traceback.print_exc()
    finally:
        try:
            if cur: cur.close()
            if conn: conn.close()
        except Exception:
            pass
        print("Verbindung geschlossen.")

if __name__ == "__main__":
    main()
