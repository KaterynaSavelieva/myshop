# sale.py
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–¥–∞–∂—ñ–≤:
- –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç
- —Ç–æ–≤–∞—Ä–∏ —Ç—ñ–ª—å–∫–∏ –∑ –¥–æ–¥–∞—Ç–Ω—ñ–º –∑–∞–ª–∏—à–∫–æ–º (lagerbestand > 0)
- –±–µ–∑–ø–µ—á–Ω–µ —Å–ø–∏—Å–∞–Ω–Ω—è —Å–∫–ª–∞–¥—É (WHERE lagerbestand >= qty)
- —Ü—ñ–Ω–∞ –ø—Ä–æ–¥–∞–∂—É: –æ—Å—Ç–∞–Ω–Ω—è –∑–∞–∫—É–ø–∫–∞ (einkauf_artikel.einkaufspreis) + –Ω–∞—Ü—ñ–Ω–∫–∞ 10..50%
  (—è–∫—â–æ –∑–∞–∫—É–ø–∫–∏ –Ω–µ –±—É–ª–æ ‚Äì –±–µ—Ä–µ–º–æ artikel.preis)
- –∑–Ω–∏–∂–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü—ñ—é: 0 / 5 / 10 %
- —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è, –≤—ñ–¥–∫–∞—Ç —à–∞–ø–∫–∏, —è–∫—â–æ –∂–æ–¥–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–≤–∏—Ç–∏
"""

import random
from datetime import datetime, timedelta
from db import get_conn, fetch_all, fetch_one

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
MIN_LINES = 1              # –º—ñ–Ω—ñ–º—É–º —Ä—ñ–∑–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ —É —á–µ–∫—É
MAX_LINES = 3              # –º–∞–∫—Å–∏–º—É–º —Ä—ñ–∑–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ —É —á–µ–∫—É
SALE_QTY_MAX = 5           # –º–∞–∫—Å–∏–º—É–º —à—Ç—É–∫ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
MARGIN_MIN = 0.10          # –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –Ω–∞—Ü—ñ–Ω–∫–∞ (10%)
MARGIN_MAX = 0.50          # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –Ω–∞—Ü—ñ–Ω–∫–∞ (50%)
DISCOUNT_CHOICES = [0, 0, 0, 5, 10]  # —á–∞—Å—Ç—ñ—à–µ –±–µ–∑ –∑–Ω–∏–∂–∫–∏


def last_purchase_price(cur, artikel_id):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –æ—Å—Ç–∞–Ω–Ω—é –∑–∞–∫—É–ø—ñ–≤–µ–ª—å–Ω—É —Ü—ñ–Ω—É (float) –∞–±–æ None, —è–∫—â–æ –∑–∞–∫—É–ø–æ–∫ –Ω–µ –±—É–ª–æ.
    """
    row = fetch_one(
        cur,
        """
        SELECT ea.einkaufspreis
        FROM einkauf_artikel ea
        JOIN einkauf e ON e.einkauf_id = ea.einkauf_id
        WHERE ea.artikel_id = %s
        ORDER BY e.datum DESC, ea.einkauf_id DESC
        LIMIT 1
        """,
        (artikel_id,)
    )
    return float(row[0]) if row else None


def create_sale():
    conn = get_conn()
    if conn is None:
        print("‚ùå –ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î.")
        return

    cur = conn.cursor()
    try:
        # 1) –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç
        kunden = fetch_all(cur, "SELECT kunden_id FROM kunden")
        if not kunden:
            print("‚ùå –ù–µ–º–∞—î –∫–ª—ñ—î–Ω—Ç—ñ–≤ ‚Äî —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω–∏ —Ç–∞–±–ª–∏—Ü—é 'kunden'.")
            return
        kunden_id = random.choice(kunden)[0]

        # 2) —Ç–æ–≤–∞—Ä–∏ –∑ –¥–æ–¥–∞—Ç–Ω—ñ–º –∑–∞–ª–∏—à–∫–æ–º
        artikels = fetch_all(
            cur, "SELECT artikel_id, lagerbestand FROM artikel WHERE lagerbestand > 0"
        )
        if not artikels:
            print("‚ÑπÔ∏è –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ —Å–∫–ª–∞–¥—ñ ‚Äî —Å–ø–æ—á–∞—Ç–∫—É –∑—Ä–æ–±–∏ –∑–∞–∫—É–ø–∫—É.")
            return

        # 3) —Å—Ç–≤–æ—Ä—é—î–º–æ —à–∞–ø–∫—É –ø—Ä–æ–¥–∞–∂—É (—á–∞—Å —Ç—Ä–æ—Ö–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —É –º–µ–∂–∞—Ö 2 –≥–æ–¥–∏–Ω)
        cur.execute(
            "INSERT INTO verkauf (kunden_id, datum) VALUES (%s, %s)",
            (kunden_id, datetime.now() - timedelta(minutes=random.randint(0, 120))),
        )
        verkauf_id = cur.lastrowid

        # 4) —Ñ–æ—Ä–º—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó
        picked = random.sample(
            artikels, k=min(random.randint(MIN_LINES, MAX_LINES), len(artikels))
        )
        inserted = 0

        for art_id, stock in picked:
            if stock <= 0:
                continue

            qty = random.randint(1, min(SALE_QTY_MAX, int(stock)))

            # –±–µ–∑–ø–µ—á–Ω–µ —Å–ø–∏—Å–∞–Ω–Ω—è —Å–∫–ª–∞–¥—É
            cur.execute(
                """
                UPDATE artikel
                   SET lagerbestand = lagerbestand - %s
                 WHERE artikel_id = %s
                   AND lagerbestand >= %s
                """,
                (qty, art_id, qty),
            )
            if cur.rowcount == 0:
                # –Ω–µ –≤–∏—Å—Ç–∞—á–∏–ª–æ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é
                continue

            # –±–∞–∑–æ–≤–∞ —Ü—ñ–Ω–∞: –æ—Å—Ç–∞–Ω–Ω—è –∑–∞–∫—É–ø–∫–∞ –∞–±–æ artikel.preis
            ek_preis = last_purchase_price(cur, art_id)
            if ek_preis is None:
                ek_preis = fetch_one(
                    cur, "SELECT preis FROM artikel WHERE artikel_id = %s", (art_id,)
                )[0]

            # –≤–∞–∂–ª–∏–≤–æ: –ø—Ä–∏–≤–µ—Å—Ç–∏ –¥–æ float, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–æ–∫ Decimal * float
            ek_preis = float(ek_preis)

            margin = float(random.uniform(MARGIN_MIN, MARGIN_MAX))
            verkaufspreis = round(ek_preis * (1 + margin), 2)
            rabatt = int(random.choice(DISCOUNT_CHOICES))

            # –≤—Å—Ç–∞–≤–ª—è—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –∑ —Ü—ñ–Ω–æ—é —Ç–∞ –∑–Ω–∏–∂–∫–æ—é
            cur.execute(
                """
                INSERT INTO verkauf_artikel
                    (verkauf_id, artikel_id, menge, verkaufspreis, rabatt_pct)
                VALUES (%s, %s, %s, %s, %s)
                """,
                (verkauf_id, art_id, qty, verkaufspreis, rabatt),
            )
            inserted += 1

        # —è–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø—Ä–æ–¥–∞–ª–∏ ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ —à–∞–ø–∫—É —ñ —Ñ—ñ–∫—Å—É—î–º–æ –≤—ñ–¥–º—ñ–Ω—É
        if inserted == 0:
            cur.execute("DELETE FROM verkauf WHERE verkauf_id = %s", (verkauf_id,))
            conn.commit()
            print("‚ÑπÔ∏è –ü—Ä–æ–¥–∞–∂ –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ ‚Äî –Ω–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–∏—Å–∞—Ç–∏ –∂–æ–¥–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó.")
            return

        conn.commit()
        print(f"‚úÖ Verkauf #{verkauf_id} —Å—Ç–≤–æ—Ä–µ–Ω–æ. –ü–æ–∑–∏—Ü—ñ–π: {inserted}.")
        print(f"Verkauf –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {datetime.now():%Y-%m-%d %H:%M:%S}")

    except Exception as e:
        conn.rollback()
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø—Ä–æ–¥–∞–∂—É:", e)
    finally:
        cur.close()
        conn.close()


if __name__ == "__main__":
    print("=" * 70)
    print(f"üïí Neuer Verkaufslauf gestartet um {datetime.now():%Y-%m-%d %H:%M:%S}")
    create_sale()
